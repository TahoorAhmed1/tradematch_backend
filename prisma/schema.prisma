generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model verification {
  id           String    @id @default(uuid())
  email        String
  password     String
  first_name   String
  last_name    String
  social_id    String?
  platform     String?
  phone_number String?
  type         user_type

  authentication authentication?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model authentication {
  id                String  @id @default(uuid())
  email_otp         String?
  is_email_verified Boolean @default(false)

  verification_id String?       @unique
  verification    verification? @relation(fields: [verification_id], references: [id], onDelete: Cascade)

  user_id String? @unique
  user    user?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model user {
  id String @id @default(uuid())

  email     String    @unique
  password  String
  type      user_type
  social_id String?
  platform  String?

  is_verified Boolean @default(false)

  authentication authentication?

  profile profile?

  posts          post[]
  original_posts post[] @relation("OriginalPostUser")

  comments             comment[]
  created_groups       group[]               @relation("group_creator")
  groups               group_member[]
  likes                like[]
  shares               share[]               @relation("shared_by_user")
  connections_sent     connection[]          @relation("connection_sender")
  connections_received connection[]          @relation("connection_receiver")
  messages             message[]             @relation("sent_messages")
  conversation_member  conversation_member[]
  notification         notification[]

  is_online       Boolean? @default(false)
  is_deleted      Boolean  @default(false)
  is_super_user   Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  story           story[]
  blocks_sender   block[]  @relation("Blocker")
  blocks_received block[]  @relation("Blocked")
}

enum user_type {
  INDIVIDUAL
  BUSINESS
}

model profile {
  id           String  @id @default(uuid())
  user         user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String  @unique
  first_name   String
  last_name    String
  phone_number String?
  company_name String?
  bio          String? @db.Text
  website_link String?
  country      String?
  city_region  String?
  region       String?

  linkedin  String?
  twitter   String?
  instagram String?
  facebook  String?

  contact_info String?

  profile_picture_url String?
  cover_picture_url   String?

  industry_subcategories industry_subcategory[] @relation("ProfileSubcategories")

  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model block {
  id            String   @id @default(uuid())
  connection_id String
  blocker_id    String
  blocked_id    String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  connection connection @relation(fields: [connection_id], references: [id], onDelete: Cascade)
  blocker    user       @relation("Blocker", fields: [blocker_id], references: [id], onDelete: Cascade)
  blocked    user       @relation("Blocked", fields: [blocked_id], references: [id], onDelete: Cascade)

  @@unique([blocker_id, blocked_id])
}

model connection {
  id String @id @default(uuid())

  sender    user   @relation("connection_sender", fields: [sender_id], references: [id], onDelete: Cascade)
  sender_id String

  receiver    user   @relation("connection_receiver", fields: [receiver_id], references: [id], onDelete: Cascade)
  receiver_id String

  status     connection_status @default(PENDING)
  is_block   Boolean           @default(false)
  is_deleted Boolean           @default(false)
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  block      block[]

  @@unique([sender_id, receiver_id])
}

model notification {
  id         String            @id @default(uuid())
  user       user              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  avatar     String?
  type       notification_type
  message    String            @db.Text
  is_read    Boolean           @default(false)
  metadata   Json?
  created_at DateTime          @default(now())
}

enum notification_type {
  LIKE
  COMMENT
  SHARE
  MESSAGE
  CONNECTION_REQUEST
  CONNECTION_ACCEPTED
  GROUP_INVITE
  GROUP_ROLE_CHANGED
  ADMIN_ANNOUNCEMENT
}

enum connection_status {
  PENDING
  ACCEPTED
  REJECTED
}

enum visibility {
  PUBLIC
  GROUP_ONLY
}

model post {
  id String @id @default(uuid())

  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  original_post_user    user?   @relation("OriginalPostUser", fields: [original_post_user_id], references: [id])
  original_post_user_id String?

  content String? @db.Text

  visibility visibility @default(PUBLIC)

  attachments file[]
  comments    comment[]
  shares      share[]      @relation("post_shares")
  likes       like[]
  group_posts group_post[]

  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model story {
  id        String   @id @default(uuid())
  user      user     @relation(fields: [userId], references: [id])
  userId    String
  mediaUrl  String
  type      String?
  caption   String?
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model industry {
  id            String                 @id @default(uuid())
  name          String                 @unique
  subcategories industry_subcategory[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model industry_subcategory {
  id String @id @default(uuid())

  name        String
  industry_id String

  industry industry  @relation(fields: [industry_id], references: [id])
  profiles profile[] @relation("ProfileSubcategories")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model file {
  id String @id @default(uuid())

  url  String?
  type file_type

  post    post?   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id String?

  message    message? @relation(fields: [message_id], references: [id], onDelete: Cascade)
  message_id String?

  filename String?
  size     Int?
  mimeType String?

  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum file_type {
  IMAGE
  PDF
  TEXT
  SPREADSHEET
  VIDEO
}

model comment {
  id      String @id @default(uuid())
  content String @db.Text

  post    post   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id String

  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  replies comment[] @relation("comment_replies")

  parent    comment? @relation("comment_replies", fields: [parent_id], references: [id])
  parent_id String?

  is_deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model share {
  id String @id @default(uuid())

  post    post   @relation("post_shares", fields: [post_id], references: [id], onDelete: Cascade)
  post_id String

  shared_by    user   @relation("shared_by_user", fields: [shared_by_id], references: [id], onDelete: Cascade)
  shared_by_id String

  group    group?  @relation(fields: [group_id], references: [id])
  group_id String?

  content String? @db.Text

  created_at DateTime @default(now())
  is_deleted Boolean  @default(false)
}

model message {
  id              String @id @default(uuid())
  conversation_id String
  sender_id       String

  content    String?  @db.Text
  is_read    Boolean  @default(false)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())

  conversation conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender       user         @relation("sent_messages", fields: [sender_id], references: [id], onDelete: Cascade)
  attachments  file[]
}

model conversation_member {
  id              String                  @id @default(uuid())
  conversation_id String
  user_id         String
  role            conversation_group_role @default(MEMBER)

  joined_at  DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  conversation conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user         user         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([conversation_id, user_id])
}

enum conversation_group_role {
  ADMIN
  MEMBER
}

model conversation {
  id       String  @id @default(uuid())
  name     String?
  is_group Boolean @default(false)

  messages message[]
  members  conversation_member[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model group {
  id              String  @id @default(uuid())
  name            String
  description     String? @db.Text
  category        String?
  location        String?
  is_private      Boolean @default(false)
  cover_image_url String?

  creator    user   @relation("group_creator", fields: [creator_id], references: [id])
  creator_id String

  members group_member[]
  posts   group_post[]
  shares  share[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)
}

model group_member {
  id String @id @default(uuid())

  group    group  @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id String

  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  role   group_role           @default(MEMBER)
  status group_member_status? @default(PENDING)

  joined_at  DateTime @default(now())
  is_deleted Boolean  @default(false)

  @@unique([group_id, user_id])
}

enum group_member_status {
  PENDING
  ACCEPTED
  REJECTED
}

enum group_role {
  MEMBER
  MODERATOR
  ADMIN
}

model group_post {
  id String @id @default(uuid())

  group    group  @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id String

  post    post   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([group_id, post_id])
}

model like {
  id String @id @default(uuid())

  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  post    post   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id String

  created_at DateTime @default(now())
  is_deleted Boolean  @default(false)

  @@unique([user_id, post_id])
}
